AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  csgo-prac-aws

  CloudFormation template for updating and running a CSGO server on docker.


Parameters:

  # Shared ID's
  HostedZoneId:
    Type: String
    Description: The ID of the Route53 hosted zone to add a DNS recordset to
  DnsHostname:
    Type: String
    Description: The hostname for the DNS record, which will be prefixed with csgo

  # Secret keys
  PushoverToken:
    Type: String
    Description: Token used to notify of update errors via Pushover
    Default: '{{resolve:ssm:pushoverToken:1}}'
  PushoverUser:
    Type: String
    Description: User used to notify update errors via Pushover
    Default: '{{resolve:ssm:pushoverUser:1}}'

  # Server Details
  EncryptionKeyId:
    Type: String
    Description: The encryption key used to encrypt the secrets within Secret Manager
  SecretName:
    Type: String
    Description: Name of the secret within Secrets Manager
    Default: 'csgo-docker/server-details'
  ServerHostname:
    Type: String
    Description: JSON key of the server hostname within Secrets Manager
    Default: 'ServerHostname'
  ServerPassword:
    Type: String
    Description: JSON key of the server password within Secrets Manager
    Default: 'ServerPassword'
  RconPassword:
    Type: String
    Description: JSON key for the password for rcon commands within the server within Secrets Manager
    Default: 'RconPassword'
  GameLoginToken:
    Type: String
    Description: JSON key for the steam token used to log into the steam servers within Secrets Manager
    Default: 'GameLoginToken'
  WebApiKey:
    Type: String
    Description: JSON key for the API Key used to access maps from the Steam Workshop within Secrets Manager
    Default: 'WebApiKey'
  SourcemodAdmins:
    Type: String
    Description: JSON key for the comma-separated Steam ID's who are able to run admin commands on the server within Secrets Manager
    Default: 'SourcemodAdmins'


Globals:
  Function:
    Timeout: 3
    Runtime: python3.9

Resources:

  ###
  # Functions
  ##

  CsgoUpdateScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule for updating the server and plugins periodically"
      Name: !Sub "${AWS::StackName}-update-rule"
      ScheduleExpression: cron(0 0 * * ? *)
      State: ENABLED
      Targets:
        -
          Id: !Sub "${AWS::StackName}-scheduler"
          Arn: !GetAtt CsgoServerCluster.Arn
          RoleArn: !GetAtt ExecuteTaskRole.Arn
          Input: !Sub '{ "containerOverrides": [ { "name": "${AWS::StackName}-container", "environment": [ { "name": "UPDATE_ONLY", "value": 1 } ] } ] }'
          EcsParameters:
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                Subnets:
                  - !Ref CsgoServerSubnet
                SecurityGroups:
                  - !Ref CsgoServerTaskSecurityGroup
                AssignPublicIp: ENABLED
            TaskDefinitionArn: !Ref CsgoServerTaskDefinition

  CsgoServerUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-update"
      Description: Manual execution of the CsgoServer ECS task
      CodeUri: csgo_lambda
      Handler: csgo_update_image.handler
      Timeout: 60
      Role: !GetAtt ExecuteTaskRole.Arn
      DeadLetterQueue:
        TargetArn: !GetAtt ErrorQueue.Arn
        Type: SQS
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ErrorQueue.QueueName
      Environment:
        Variables:
          ECS_CLUSTER: !Ref CsgoServerCluster
          TASK_DEFN: !Ref CsgoServerTaskDefinition
          SUBNETS: !Ref CsgoServerSubnet
          SECURITY_GROUPS: !Ref CsgoServerTaskSecurityGroup
          CONTAINER_NAME: !Sub "${AWS::StackName}-container"
      Events:
        UpdateCsgoServerEvent:
          Type: Api
          Properties:
            Path: /update
            Method: post
            RestApiId: !Ref CsgoServerApi
      Layers:
        - !Ref AwsLayer

  CsgoServerDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-delete"
      Description: Delete all data from the CSGO volume
      CodeUri: csgo_lambda
      Handler: csgo_delete_volume.handler
      Timeout: 60
      Role: !GetAtt ExecuteTaskRole.Arn
      DeadLetterQueue:
        TargetArn: !GetAtt ErrorQueue.Arn
        Type: SQS
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ErrorQueue.QueueName
      Environment:
        Variables:
          ECS_CLUSTER: !Ref CsgoServerCluster
          TASK_DEFN: !Ref CsgoServerTaskDefinition
          SUBNETS: !Ref CsgoServerSubnet
          SECURITY_GROUPS: !Ref CsgoServerTaskSecurityGroup
          CONTAINER_NAME: !Sub "${AWS::StackName}-container"
      Events:
        UpdateCsgoServerEvent:
          Type: Api
          Properties:
            Path: /delete
            Method: post
            RestApiId: !Ref CsgoServerApi
      Layers:
        - !Ref AwsLayer

  CsgoServerStartFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-start"
      Description: Start the container to run the CSGO server
      CodeUri: csgo_lambda
      Handler: csgo_start_server.handler
      Timeout: 60
      Role: !GetAtt ExecuteTaskRole.Arn
      DeadLetterQueue:
        TargetArn: !GetAtt ErrorQueue.Arn
        Type: SQS
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ErrorQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt CsgoServerGetHostnameQueue.QueueName
      Environment:
        Variables:
          ECS_CLUSTER: !Ref CsgoServerCluster
          TASK_DEFN: !Ref CsgoServerTaskDefinition
          SUBNETS: !Ref CsgoServerSubnet
          SECURITY_GROUPS: !Ref CsgoServerTaskSecurityGroup
          CONTAINER_NAME: !Sub "${AWS::StackName}-container"
          GET_HOSTNAME_QUEUE: !Ref CsgoServerGetHostnameQueue
      Events:
        StartCsgoServerEvent:
          Type: Api
          Properties:
            Path: /start
            Method: post
            RestApiId: !Ref CsgoServerApi
      Layers:
        - !Ref AwsLayer

  CsgoServerGetHostnameFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-hostname"
      Description: Assign a hostname to a newly created ECS task
      CodeUri: csgo_lambda
      Handler: csgo_get_hostname.handler
      Timeout: 60
      Role: !GetAtt CreateHostnameRole.Arn
      DeadLetterQueue:
        TargetArn: !GetAtt ErrorQueue.Arn
        Type: SQS
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ErrorQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt CsgoServerGetHostnameQueue.QueueName
      Environment:
        Variables:
          ECS_CLUSTER: !Ref CsgoServerCluster
          TASK_FAMILY: !Sub "${AWS::StackName}-task"
          HOSTED_ZONE_ID: !Ref HostedZoneId
          DNS_HOSTNAME: !Ref DnsHostname
          GET_HOSTNAME_QUEUE: !Ref CsgoServerGetHostnameQueue
      Events:
        GetHostnameQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt CsgoServerGetHostnameQueue.Arn
      Layers:
        - !Ref AwsLayer

  CsgoServerStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-status"
      Description: Get the status for running CSGO servers
      CodeUri: csgo_lambda
      Handler: csgo_get_server_status.handler
      Timeout: 60
      Role: !GetAtt GetServerStatusRole.Arn
      DeadLetterQueue:
        TargetArn: !GetAtt ErrorQueue.Arn
        Type: SQS
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ErrorQueue.QueueName
      Environment:
        Variables:
          ECS_CLUSTER: !Ref CsgoServerCluster
          TASK_FAMILY: !Sub "${AWS::StackName}-task"
          HOSTED_ZONE_ID: !Ref HostedZoneId
      Events:
        GetCsgoServerStatusEvent:
          Type: Api
          Properties:
            Path: /status
            Method: get
            RestApiId: !Ref CsgoServerApi
      Layers:
        - !Ref AwsLayer

  CsgoServerStopFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-stop"
      Description: Stop the container running the CSGO server
      CodeUri: csgo_lambda
      Handler: csgo_stop_server.handler
      Timeout: 60
      Role: !GetAtt StopServerRole.Arn
      DeadLetterQueue:
        TargetArn: !GetAtt ErrorQueue.Arn
        Type: SQS
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ErrorQueue.QueueName
      Environment:
        Variables:
          ECS_CLUSTER: !Ref CsgoServerCluster
          HOSTED_ZONE_ID: !Ref HostedZoneId
      Events:
        StopCsgoServerEvent:
          Type: Api
          Properties:
            Path: /stop
            Method: post
            RestApiId: !Ref CsgoServerApi
      Layers:
        - !Ref AwsLayer

  ErrorHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-error-handler"
      Description: Catch and notify on errors in other functions
      CodeUri: reporting
      Handler: error_reporting.handler
      Timeout: 30
      Environment:
        Variables:
          PUSHOVER_TOKEN: !Ref PushoverToken
          PUSHOVER_USER: !Ref PushoverUser
      Events:
        ErrorQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt ErrorQueue.Arn

  AwsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-dependencies"
      Description: Dependencies for PKGBUILD apps
      ContentUri: src/
      CompatibleRuntimes:
        - python3.8
        - python3.9
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  CsgoServerGetHostnameQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-get-hostname-queue"
      DelaySeconds: 10
      VisibilityTimeout: 60

  ErrorQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-error-queue"
      VisibilityTimeout: 30

  ###
  # Networking
  ##

  # The ECS task needs to be on the same VPC as the EFS instance, and also
  # needs internet connectivity to download the image from docker hub. This 
  # VPC creates a single public subnet which routes through an internet 
  # gateway to allow for this.

  CsgoServerVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"

  CsgoServerInternetGateway:
    Type: AWS::EC2::InternetGateway

  CsgoServerInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref CsgoServerInternetGateway
      VpcId: !Ref CsgoServerVPC

  CsgoServerSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.1.0/24
      VpcId: !Ref CsgoServerVPC
      AvailabilityZone: "eu-west-1a"
      MapPublicIpOnLaunch: True

  CsgoServerRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CsgoServerVPC

  CsgoServerRoute:
    Type: AWS::EC2::Route
    DependsOn: CsgoServerInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref CsgoServerRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CsgoServerInternetGateway

  CsgoServerRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CsgoServerRouteTable
      SubnetId: !Ref CsgoServerSubnet

  ###
  # API
  ##

  CsgoServerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: CsgoServerApiSwagger.yaml
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: "*"
              Resource:
                - execute-api:/*/*/*
              Action:
                - execute-api:Invoke

  CsgoServerApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "csgo-api.${DnsHostname}"
      ValidationMethod: DNS
      DomainValidationOptions:
        -
          DomainName: !Sub "csgo-api.${DnsHostname}"
          HostedZoneId: !Ref HostedZoneId

  CsgoServerApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref CsgoServerApiCertificate
      DomainName: !Sub "csgo-api.${DnsHostname}"

  CsgoServerApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ""
      DomainName: !Ref CsgoServerApiDomainName
      RestApiId: !Ref CsgoServerApi
      Stage: !Ref CsgoServerApi.Stage

  CsgoStatusRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "csgo-api.${DnsHostname}"
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt CsgoServerApiDomainName.RegionalHostedZoneId
        DNSName: !GetAtt CsgoServerApiDomainName.RegionalDomainName
      HostedZoneId: !Ref HostedZoneId


  ###
  # Static Website
  ##

  CsgoStatusWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "csgo-service.${DnsHostname}"
      AccessControl: PublicRead
      MetricsConfigurations:
        - Id: EntireBucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  CsgoStatusWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CsgoStatusWebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource:
              - !Sub "${CsgoStatusWebsiteBucket.Arn}/*"

  CsgoStatusWebsiteApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "csgo-service.${DnsHostname}"
      ValidationMethod: DNS
      DomainValidationOptions:
        -
          DomainName: !Sub "csgo-service.${DnsHostname}"
          HostedZoneId: !Ref HostedZoneId

  CsgoStatusWebsiteApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref CsgoStatusWebsiteApiCertificate
      DomainName: !Sub "csgo-service.${DnsHostname}"

  CsgoStatusWebsiteRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "csgo-service.${DnsHostname}"
      Type: A
      AliasTarget:
        HostedZoneId: "Z1BKCTXD74EZPE" # The S3 eu-west-1 hosted zone ID
        DNSName: "s3-website-eu-west-1.amazonaws.com" # S3 eu-west-1 DNS
      HostedZoneId: !Ref HostedZoneId

  ###
  # EFS
  ##

  CsgoServerFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "elasticfilesystem:ClientMount"
              - "elasticfilesystem:ClientWrite"
            Principal:
              AWS: "*"

  CsgoServerMountPoint:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref CsgoServerFileSystem
      SubnetId: !Ref CsgoServerSubnet
      SecurityGroups:
      - !Ref CsgoServerEfsSecurityGroup

  CsgoServerAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref CsgoServerFileSystem
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0777"
        Path: "/home/steam/csgo"

  CsgoServerEfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for the EFS"
      VpcId: !Ref CsgoServerVPC
      SecurityGroupIngress:
        -
          Description: "Inbound port for EFS"
          FromPort: 2049
          IpProtocol: "tcp"
          ToPort: 2049
          SourceSecurityGroupId: !Ref CsgoServerTaskSecurityGroup

  ###
  # ECS
  ##

  CsgoServerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  CsgoServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CsgoServerFileSystem
    Properties:
      Family: !Sub "${AWS::StackName}-task"
      Cpu: "2048"
      Memory: "8192"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: !GetAtt CsgoServerTaskRole.Arn
      ExecutionRoleArn: !GetAtt CsgoServerTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-container"
          Image: "couldinho/csgo-prac-docker"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub "/ecs/${AWS::StackName}-docker"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          Secrets:
            - Name: "SERVER_HOSTNAME"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}:${ServerHostname}::"
            - Name: "SERVER_PASSWORD"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}:${ServerPassword}::"
            - Name: "RCON_PASSWORD"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}:${RconPassword}::"
            - Name: "STEAM_ACCOUNT"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}:${GameLoginToken}::"
            - Name: "AUTHKEY"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}:${WebApiKey}::"
            - Name: "SOURCEMOD_ADMINS"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}:${SourcemodAdmins}::"
          MountPoints:
            - SourceVolume: data
              ContainerPath: /home/steam/csgo
              ReadOnly: false
      Volumes:
      - Name: data
        EFSVolumeConfiguration:
          FilesystemId: !Ref CsgoServerFileSystem
          TransitEncryption: ENABLED
          AuthorizationConfig:
            AccessPointId: !Ref CsgoServerAccessPoint
            IAM: ENABLED

  CsgoServerTaskLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}-docker"
      RetentionInDays: 90


  CsgoServerTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for the ECS Task"
      VpcId: !Ref CsgoServerVPC
      SecurityGroupEgress:
        -
          Description: "EFS mount port"
          FromPort: 2049
          IpProtocol: "tcp"
          ToPort: 2049
          CidrIp: 0.0.0.0/0
        -
          Description: "CSGO Server port"
          FromPort: 27015
          IpProtocol: "tcp"
          ToPort: 27015
          CidrIp: 0.0.0.0/0
        -
          Description: "CSGO TV port"
          FromPort: 27020
          IpProtocol: "tcp"
          ToPort: 27020
          CidrIp: 0.0.0.0/0
        -
          Description: "CSGO Server port"
          FromPort: 27015
          IpProtocol: "udp"
          ToPort: 27015
          CidrIp: 0.0.0.0/0
        -
          Description: "CSGO TV port"
          FromPort: 27020
          IpProtocol: "udp"
          ToPort: 27020
          CidrIp: 0.0.0.0/0
        -
          Description: "HTTP port for non-SSL traffic"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          Description: "HTTP port for SSL traffic"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        -
          Description: "CSGO Server port"
          FromPort: 27015
          IpProtocol: "tcp"
          ToPort: 27015
          CidrIp: 0.0.0.0/0
        -
          Description: "CSGO TV port"
          FromPort: 27020
          IpProtocol: "tcp"
          ToPort: 27020
          CidrIp: 0.0.0.0/0
        -
          Description: "CSGO Server port"
          FromPort: 27015
          IpProtocol: "udp"
          ToPort: 27015
          CidrIp: 0.0.0.0/0
        -
          Description: "CSGO TV port"
          FromPort: 27020
          IpProtocol: "udp"
          ToPort: 27020
          CidrIp: 0.0.0.0/0


  ###
  # Roles
  ##

  GetServerStatusRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-get-server-status-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ecs-tasks.amazonaws.com
                - events.amazonaws.com
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-get-server-status-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessageBatch
                  - sqs:SendMessage
                  - iam:GetRole
                  - iam:PassRole
                Resource:
                  - !Ref CsgoServerTaskDefinition
                  - !GetAtt ErrorQueue.Arn
                  - !GetAtt CsgoServerTaskRole.Arn
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  '*'
              - Effect: Allow
                Action:
                  - route53:ListResourceRecordSets
                Resource:
                  - !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'
              - Effect: Allow
                Action:
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                Resource:
                  '*'
                Condition:
                  ArnEquals:
                    ecs:cluster: !GetAtt CsgoServerCluster.Arn

  StopServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-stop-server-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ecs-tasks.amazonaws.com
                - events.amazonaws.com
                - route53.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-stop-server-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:ListResourceRecordSets
                Resource:
                  - !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  '*'
              - Effect: Allow
                Action:
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - ecs:StopTask
                Resource:
                  '*'
                Condition:
                  ArnEquals:
                    ecs:cluster: !GetAtt CsgoServerCluster.Arn

  CreateHostnameRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-create-hostname-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ecs-tasks.amazonaws.com
                - events.amazonaws.com
                - route53.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-create-hostname-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessageBatch
                  - sqs:SendMessage
                Resource:
                  - !GetAtt ErrorQueue.Arn
                  - !GetAtt CsgoServerGetHostnameQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt CsgoServerGetHostnameQueue.Arn
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource:
                  - !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  '*'
              - Effect: Allow
                Action:
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                Resource:
                  '*'
                Condition:
                  ArnEquals:
                    ecs:cluster: !GetAtt CsgoServerCluster.Arn

  ExecuteTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-execute-task-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ecs-tasks.amazonaws.com
                - events.amazonaws.com
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-execute-task-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessageBatch
                  - sqs:SendMessage
                  - ecs:RunTask
                  - iam:GetRole
                  - iam:PassRole
                Resource:
                  - !Ref CsgoServerTaskDefinition
                  - !GetAtt ErrorQueue.Arn
                  - !GetAtt CsgoServerGetHostnameQueue.Arn
                  - !GetAtt CsgoServerTaskRole.Arn
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  '*'
              - Effect: Allow
                Action:
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - ecs:StopTask
                Resource:
                  '*'
                Condition:
                  ArnEquals:
                    ecs:cluster: !GetAtt CsgoServerCluster.Arn

  CsgoServerTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-task-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-task-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                Resource:
                  - !GetAtt CsgoServerAccessPoint.Arn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                  - kms:Decrypt
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}"
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${EncryptionKeyId}"


Outputs:
  ServiceHostname:
    Description: Hostname used to connet to the API
    Value: !Ref CsgoServerApiDomainName
  StatusWebsiteHostname:
    Description: Hostname used to connet to the web-based service
    Value: !Ref CsgoStatusWebsiteApiDomainName
  ServiceS3Url:
    Description: S3 bucket to store website files in
    Value: !Ref CsgoStatusWebsiteBucket

